#include "../MODBUS_RTU_Slave.h"

#ifdef MODBUS_RTU_SLAVE_ENABLE_FEATURE_CPLUSPLUS_CLASS
uint8_t _Boolean::Communication::MODBUS_RTU_Slave::_GetFunctionCodeAttribute(const uint8_t code)
#else
uint8_t _MODBUS_RTU_Slave_GetFunctionCodeAttribute(const uint8_t code)
#endif
{
    /// @brief 所有受支持的功能码的 Attribute
    const static uint8_t attributes[17] = {
#ifdef MODBUS_RTU_SLAVE_ENABLE_FEATURE_COIL
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_MULTIPLE, // 0x01
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_MULTIPLE, // 0x02
#else
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN,
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN,
#endif
        (MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_16BITS | MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_MULTIPLE), // 0x03
        (MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_16BITS | MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_MULTIPLE), // 0x04
#ifdef MODBUS_RTU_SLAVE_ENABLE_FEATURE_COIL
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_WRITE, // 0x05
#else
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN,
#endif
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_WRITE | MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_16BITS, // 0x06
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN, // 0x07
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN, // 0x08
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN, // 0x09
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN, // 0x0A
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN, // 0x0B
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN, // 0x0C
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN, // 0x0D
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN, // 0x0E
#ifdef MODBUS_RTU_SLAVE_ENABLE_FEATURE_COIL
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_WRITE | MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_MULTIPLE, // 0x0F
#else
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_UNKNOWN,
#endif
        MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_WRITE | MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_16BITS | MODBUS_RTU_FUNCTIONCODE_ATTRIBUTE_MULTIPLE, // 0x10
    };
    if (code - 1 >= sizeof(attributes))
    {
        return 0;
    }
    return attributes[code - 1];
}
